[include]
	path = ~/.gitconfig-schlameuss
[includeIf "gitdir:~/src/linux/"]
	path = ~/.gitconfig-schlameuss-linux
[includeIf "gitdir:~/src/ltc/"]
	path = ~/.gitconfig-schlameuss-linux
[includeIf "gitdir:~/src/ltc/linux/"]
	path = ~/.gitconfig-schlameuss-linux
[includeIf "gitdir:~/src/schlac/"]
	path = ~/.gitconfig-schlac
[includeIf "gitdir:~/.cfg"]
	path = ~/.gitconfig-schlac
[push]
	default = simple
[credential]
	helper = cache --timeout=7200
[status]
	submoduleSummary = true
[commit]
	verbose = true
[init]
	defaultBranch = main
[core]
	ignorecase = false
	autocrlf = input
	excludesfile = ~/.gitignore
	commitGraph = true
[gc]
	writeCommitGraph = true
[fetch]
	recurseSubmodules = true
[lfs]
	LocalMediaDir = ~/.git-lfs-objects
	locksverify = false
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	required = true
	clean = git-lfs clean -- %f
	process = git-lfs filter-process
[alias]
	#all = "!this() { git $*; }; all() { this && git submodule foreach --recursive "this"; }; all"
	all = "!all() { git $* && git submodule foreach --recursive \"git $*\"; }; all"
	alli = "!ali() { git $* ;  git submodule foreach --recursive \"git $* || true\"; }; ali"
	amend = commit --amend --allow-empty
	amenda = commit --amend -a --reuse-message=HEAD
	b = branch
	blame-stat = "!bb() { git ls-tree -r -z --name-only HEAD -- $* | xargs -0 -n1 git blame --line-porcelain HEAD | grep \"^author \"| sort | uniq -c | sort -nr; }; bb"
	cc = "!c() { git commit -am \"Quick commit $(whoami)@$(hostname) $(date --iso) $*\"; }; c"
	cite = show -s --pretty='format:%h (\"%s\")'
	co = checkout
	cr = "!git checkout -b review-$(date +'%m%d')"
	desc = log -1 --grep=branch.description --format=format:'%b'
	difflog = "!s() { echo 'local:'; git l @{u}...HEAD; echo; echo 'upstream:'; git l HEAD...@{u}; }; s"
	ec = config --global -e
	ecl = config --local -e
	f = fetch --tags
	ff = fetch --tags --all
	fp = fetch --tags --prune
	first = rev-list --max-parents=0 HEAD
	rh = reset --hard
	ria = !git rebase -i "$(git merge-base HEAD @{u})"
	main = "!git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs"
	format-out = "! pwd && find ./outgoing/ -name '*.patch' | xargs -tn1 rm ; git format-patch -o ./outgoing/"
	send-rfc = send-email --rfc --compose --annotate --to-cover --cc-cover
	#su = !git branch --set-upstream-to="$@"
	su = "!s() { git branch --set-upstream-to=$*; }; s"
	suu = !git su "origin/$(git rev-parse --abbrev-ref HEAD)"
	sumo = !git su "origin/$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)"
	ss = show --stat
	s = !git all status -sbu --show-stash
	#sl = "!join -1 2 -2 1 -a 2 -a 1 <(git s) <(git diff --stat)"
	s1 = !git all status -sbu --porcelain=v1
	s2 = !git all status -sbu --porcelain=v2
	ts = s
	l = log --decorate --format='%C(bold blue)%h%C(reset) %C(white)%s%C(reset) %C(dim white)%ae%C(reset)%C(auto)%d (%ar) %N'
	ld = log --decorate --format='%C(bold blue)%(describe)%C(reset) %C(white)%s%C(reset) %C(dim white)%ae%C(reset)%C(auto)%d (%ar) %N'
	l1 = l -1
	la = l --graph --all -20
	ls = l --stat @{u}...
	llc = log --format='%C(bold blue)%H%C(reset) %C(white)%s%C(reset) %C(dim white)%ae%C(reset)%C(auto)'
	ll = log --format='%C(bold blue)%H%C(reset)'
	lsd = l --stat origin/dev..
	lsu = l --stat @{u}..
	lsm = !git l --stat $(git main)..
	lr = l --show-notes=review -6
	lg = l --graph -20
	p = !git pull --rebase --prune && git submodule update --recursive --init --rebase --remote
	pp = !git pull --rebase --autostash && git submodule foreach --recursive 'git pull --rebase --autostash'
	ppp = !git pull --rebase --autostash --prune && git submodule foreach --recursive 'git pull --rebase --autostash --prune'
	prune-all = !git remote | xargs -t -n 1 git remote prune
	pickaxe = log -S
	panic = "!panic() { ptext=$1; pname=\"../git-$(basename $(pwd))-$(date \"+%Y-%m-%dT%H%M%S\")-${ptext:=panic}.tar\"; echo \"Creating backup ($pname)...\"; tar cf \"$pname\" .; ls -l \"$pname\"; }; panic"
[diff]
	tool = code
	indentHeuristic = true
[difftool "code"]
	cmd = /usr/bin/code --wait --diff "$LOCAL" "$REMOTE"
[difftool "pycharm"]
	cmd = /usr/local/bin/charm diff "$LOCAL" "$REMOTE" && echo "Press enter to continue..." && read
[merge]
	; tool = code
	tool = nvimdiff
	keepBackup = false
[mergetool]
	keepBackup = false
[mergetool "code"]
	cmd = code --wait "$MERGED"
[mergetool "pycharm"]
	cmd = /usr/local/bin/charm merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
[b4]
	email-exclude = stable@vger.kernel.org
	prep-perpatch-check-cmd = ./scripts/checkpatch.pl --terse --no-summary --mailback --strict --showfile
	am-perpatch-check-cmd = ./scripts/checkpatch.pl -q --terse --no-summary --mailback --strict
[pretty]
	fixes = Fixes: %h (\\\"%s\\\")
